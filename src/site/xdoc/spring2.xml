<?xml version="1.0" encoding="UTF-8"?>
<document
	xmlns="http://maven.apache.org/XDOC/2.0"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/xsd/xdoc-2.0.xsd">
<properties></properties><body>





<section name="Spring Transaction Managers ">

<p>
With ebean-spring-2.4.0 Ebean can transparently use an external Spring transaction manager.
The com.avaje.ebean.springsupport.txn.SpringAwareJdbcTransactionManager has been updated
so that Ebean is notified when a Spring managed transaction is commited or rolled back.
With this notification Ebean then can automatically manage its L2 server cache etc.
</p>
<p>
To use the SpringAwareJdbcTransactionManager you need to set it via ServerConfig.setExternalTransactionManager()
when constructing a EbeanServer instance.

</p>

<subsection name="Wiring via XML">

<p>
The ebean-spring module contains some simple tests that use Spring XML wiring to configure an EbeanServer.
</p>
<p>
The default-ebean-server.xml provides a base configuration that specifies the SpringAwareJdbcTransactionManager and
this is extended by the init-database.xml configuration to specify the DataSource and ddl generation options etc.
</p>
</subsection>
<subsection name="Anatomy of applicationConfiguration.xml">
<table cellspacing="0" cellpadding="0" class="codeAnnotation">
<tr>
<td>
<pre><![CDATA[<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xmlns:tx="http://www.springframework.org/schema/tx"
    xmlns:context="http://www.springframework.org/schema/context"
    xsi:schemaLocation="http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans-2.5.xsd
        http://www.springframework.org/schema/tx
        http://www.springframework.org/schema/tx/spring-tx-2.5.xsd
        http://www.springframework.org/schema/context
        http://www.springframework.org/schema/context/spring-context-2.5.xsd">]]>
</pre></td>
<td>Opening of spring config file</td>
</tr>
<tr>
<td class="code"><pre><![CDATA[    <import resource="classpath:default-ebean-server.xml"/>]]></pre></td>
<td>Reference to installed definition</td>
</tr>
<tr>
<td>
<pre><![CDATA[    <!-- Transactions via Annotation use Springs @Transactional -->
    <tx:annotation-driven transaction-manager="transactionManager" />
    <context:annotation-config />]]>
</pre></td>
<td>Declacare use of @Transactional annotation within code base.</td>
</tr>

<tr>
<td>
<pre><![CDATA[    <bean
        class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
        <!--  config.file is set by initializing the JVM with a parameter such as
            -Dconfig.file="/proj/config/test1.properties".
            to use a different convention replace ${config.file} with a hard coded value.
        -->
        <property name="location">
             <value>file:${config.file}</value>
        </property>
        <property name="properties">
            <props>
                <prop key="jdbc.url">
                    ${jdbc.url}
                </prop>
                <prop key="jdbc.username">
                    ${jdbc.username}
                </prop>
                <prop key="jdbc.password">
                    ${jdbc.password}
                </prop>
                <prop key="jdbc.driver">
                    ${jdbc.driver}
                </prop>
            </props>
        </property>
    </bean>]]>
</pre></td>
<td>Define property structure to use properties to define volitle information in the datasource.</td>
</tr>

<tr>
<td>
<pre><![CDATA[    <!-- The real DataSource  -->
    <bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource">
        <property name="driverClassName" value="${jdbc.driver}" />
        <property name="url" value="${jdbc.url}" />
        <property name="username" value="${jdbc.username}" />
        <property name="password" value="${jdbc.password}" />
    </bean>]]>
</pre></td>
<td>Define a connection pool that will be used by EBean but may also be passed directly to other services.</td>
</tr>

<tr>
<td>
<pre><![CDATA[    <!--  Transaction Manager -->
    <bean id="transactionManager"
            class="org.springframework.jdbc.datasource.DataSourceTransactionManager"
    >
        <property name="dataSource" ref="dataSource"/>
    </bean>]]>
</pre></td>
<td>Opening of spring config file</td>
</tr>

<tr>
<td>
<pre><![CDATA[    <bean id="serverConfig" parent="defaultEbeanServerConfig">
        <property name="name" value="test"/>
        <property name="classes">
            <list>
                <value>com.avaje.ebean.springsupport.User</value>
                <value>com.avaje.ebean.springsupport.Role</value>
                <value>com.avaje.ebean.springsupport.Account</value>
            </list>
        </property>
        <property name="dataSource" ref="dataSource"/>

        <property name="ddlGenerate" value="true"/>
        <property name="ddlRun" value="true"/>
    </bean>]]>
</pre></td>
<td><p>
Completes definition of the ebean persistence unit (database).
The set of properties is documented in <a href="http://www.avaje.org/ebean/getstarted_props.html#props">elsewhere</a>.
</p>
<p>In lieu of the dataSource Property, you could provide a dataSourceConfig bean which EBean would then use to create its own data source.
That dataSource could not be exposed to non EBean classes.</p>
</td>
</tr>

<tr>
<td>
<pre><![CDATA[    <!-- Ebean server -->
    <bean id="ebeanServer"
            class="com.avaje.ebean.springsupport.factory.EbeanServerFactoryBean">
        <property name="serverConfig" ref="serverConfig"/>
    </bean>]]>
</pre></td>
<td><p>Creates the ebean server bean that can then be injected to any other bean that needs to make a direct reference to the ebean service (eg ebean.find(...)</p></td>
</tr>

<tr>
<td>
<pre><![CDATA[    <bean id="userService"
            class="com.avaje.ebean.springsupport.UserServiceImpl">
        <property name="ebeanServer" ref="ebeanServer"/>
    </bean>
</beans>]]>
</pre></td>
<td><p>Defines a user application functional block.  Note that it needs ebeanServer injected.</p></td>
</tr>
</table>
</subsection>
<subsection name="Anatomy of JPA Enabled applicationConfiguration.xml">
<table cellspacing="0" cellpadding="0" class="codeAnnotation">
<tr>
<td>
<pre><![CDATA[<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xmlns:tx="http://www.springframework.org/schema/tx"
    xmlns:context="http://www.springframework.org/schema/context"
    xsi:schemaLocation="http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans-2.5.xsd
        http://www.springframework.org/schema/tx
        http://www.springframework.org/schema/tx/spring-tx-2.5.xsd
        http://www.springframework.org/schema/context
        http://www.springframework.org/schema/context/spring-context-2.5.xsd">]]>
</pre></td>
<td>Opening of spring config file</td>
</tr>
<tr>
<td class="code"><pre><![CDATA[    <import resource="classpath:default-ebean-server.xml"/>]]></pre></td>
<td>Reference to installed definition</td>
</tr>
<tr>
<td>
<pre><![CDATA[    <!-- Transactions via Annotation use Springs @Transactional -->
    <tx:annotation-driven transaction-manager="transactionManager" />
    <context:annotation-config />]]>
</pre></td>
<td>Declacare use of @Transactional annotation within code base.</td>
</tr>

<tr>
<td>
<pre><![CDATA[    <bean
        class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
        <!--  config.file is set by initializing the JVM with a parameter such as
            -Dconfig.file="/proj/config/test1.properties".
            to use a different convention replace ${config.file} with a hard coded value.
        -->
        <property name="location">
             <value>file:${config.file}</value>
        </property>
        <property name="properties">
            <props>
                <prop key="jdbc.url">
                    ${jdbc.url}
                </prop>
                <prop key="jdbc.username">
                    ${jdbc.username}
                </prop>
                <prop key="jdbc.password">
                    ${jdbc.password}
                </prop>
                <prop key="jdbc.driver">
                    ${jdbc.driver}
                </prop>
            </props>
        </property>
    </bean>]]>
</pre></td>
<td>Define property structure to use properties to define volitle information in the datasource.</td>
</tr>

<tr>
<td>
<pre><![CDATA[    <!-- The real DataSource  -->
    <bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource">
        <property name="driverClassName" value="${jdbc.driver}" />
        <property name="url" value="${jdbc.url}" />
        <property name="username" value="${jdbc.username}" />
        <property name="password" value="${jdbc.password}" />
    </bean>]]>
</pre></td>
<td>Define a connection pool that will be used by EBean but may also be passed directly to other services.</td>
</tr>

<tr>
<td>
<pre><![CDATA[    <!--  Transaction Manager -->
    <bean id="transactionManager"
            class="org.springframework.jdbc.datasource.DataSourceTransactionManager"
    >
        <property name="dataSource" ref="dataSource"/>
    </bean>]]>
</pre></td>
<td>Opening of spring config file</td>
</tr>

<tr>
<td>
<pre><![CDATA[    <bean id="entityManagerFactory"
        class="org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean"
        p:dataSource-ref="dataSource"
        p:persistence-xml-location="META-INF/persistence.xml"
        p:persistenceUnitName="test">
        <property name="jpaVendorAdapter">
            <bean class="com.avaje.ebean.springsupport.spi.jpa.EbeanJpaVendorAdapter" />
        </property>
    </bean>]]>
</pre></td>
<td><p>
Defines JPA persistance with EBean as the persistance provider.
</p>
<p>In this case <code> p:persistence-xml-location="META-INF/persistence.xml"</code> tells spring to look in the classpath for META-INF.</p>
</td>
</tr>

<tr>
<td>
<pre><![CDATA[    <bean id="serverConfig" parent="defaultEbeanServerConfig">
        <property name="name" value="test"/>
        <property name="classes">
            <list>
                <value>com.avaje.ebean.springsupport.User</value>
                <value>com.avaje.ebean.springsupport.Role</value>
                <value>com.avaje.ebean.springsupport.Account</value>
            </list>
        </property>
        <property name="dataSource" ref="dataSource"/>

        <property name="ddlGenerate" value="true"/>
        <property name="ddlRun" value="true"/>
    </bean>]]>
</pre></td>
<td><p>
Completes definition of the ebean persistence unit (database).
The set of properties is documented in <a href="http://www.avaje.org/ebean/getstarted_props.html#props">elsewhere</a>.
</p>
<p>In lieu of the dataSource Property, you could provide a dataSourceConfig bean which EBean would then use to create its own data source.
That dataSource could not be exposed to non EBean classes.</p>
</td>
</tr>

<tr>
<td>
<pre><![CDATA[    <!-- Ebean server -->
    <bean id="ebeanServer"
            class="com.avaje.ebean.springsupport.factory.EbeanServerFactoryBean">
        <property name="serverConfig" ref="serverConfig"/>
    </bean>]]>
</pre></td>
<td><p>Creates the ebean server bean that can then be injected to any other bean that needs to make a direct reference to the ebean service (eg ebean.find(...)</p></td>
</tr>

<tr>
<td>
<pre><![CDATA[    <bean id="userService"
            class="com.avaje.ebean.springsupport.UserServiceImpl">
        <property name="ebeanServer" ref="ebeanServer"/>
    </bean>
</beans>]]>
</pre></td>
<td><p>Defines a user application functional block.  Note that it needs ebeanServer injected.</p></td>
</tr>
</table>
</subsection>
</section></body>
</document>