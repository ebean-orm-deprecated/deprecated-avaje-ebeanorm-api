<?xml version="1.0" encoding="UTF-8"?>
<faqs xmlns="http://maven.apache.org/FML/1.0.1"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://maven.apache.org/FML/1.0.1 http://maven.apache.org/xsd/fml-1.0.1.xsd"
  title="Frequently Asked Questions"
  toplink="true">

  <part id="general">
    <title>General</title>

    <faq id="different">
      <question>
        How is EBean different from other ORMs?
      </question>
      <answer>
        <p>Ebean uses the JPA Mapping annotations and will follow those very closely.
However, Ebean has been architected and built from a different perspective than JPA. The
Architectural and Query language differences are reasonably fundamental to both Ebean
and JPA so its hard to see these differences going away anytime soon.
It becomes a question of whether this different approach taken by Ebean has technical
merit and has made Ebean an easier ORM to understand and use.</p>
<p>Part of Ebean's goal is to make using your own SQL easy (easier than Ibatis is the goal
for Ebean). The @SqlSelect feature goes a long way to doing this along with SqlUpdate
and CallableSql objects.</p>
      </answer>
    </faq>

    <faq id="jpa">
      <question>
        Is EBean fully JPA compliant?
      </question>
      <answer>
        <p>We look at the Java Persistence API (JPA) as 3 discrete components:</p>
        <ol><li><p>Object to Entity Mapping: EBean supports all of the Entity definition orient annotations in the javax.persisitance package.
        like most other JPA applications we also support additional EBean specific annotations that allow additional data semantics (see ddlfaq).
        ***Fact check: Begin*** Ebean does not support Orm via persistence.xml because no user has requested it.***Fact check: End***</p></li>
        <li><p>Session Management: EBean can be viewed as a "Stateless alternative to JPA."
        In other words, EBean supports all aspects of JTA as well as DBMS transaction models but it does not require the notion of an underlying user session.
        Any user who has run into a lazy loading exception using session oriented JPA providers will recognize the advantage of the ebean approach.
        ***Attempt to describe a possible EM strategy w/o committing to it: Begin*** There is an experimental EBean EntityManager facade that allows a client to use the EntityManager programming model while Ebean implements those calls immediately.
        At this point there is minimal demand for a mechanism to use EBean to run JPA code unaltered.***Attempt to describe a possible EM strategy w/o committing to it: End***</p> 
        <p>JPA is an API with an implied architecture attached (EntityManager is a per user session object that needs to be managed and has beans that are attached/detached/merged to it).
         I'd say the JPA EG vision is that generally people would handle the management of those EntityManager instances via JEE Stateful Session Beans or Seam/WebBeans (which is perhaps why JPA is so aweful to use outside a container).
         I'd say Ebean is at the opposite end pushing effectively a Stateless approach.</p></li>
        <li>Query Language:  *** ToDo: Essay that outlines difference JpQL and EbQL. ***</li></ol>
      </answer>
    </faq>

    <faq id="jpql">
      <question>
        What is the difference between Ebean Query Language and Java Persistence Query Language (JPQL)?
      </question>
      <answer>
        <p>*** ToDo: Essay that outlines difference JpQL and EbQL. ***</p>
      </answer>
    </faq>

    <faq id="ddl">
      <question>
        What a additional entity definition annotations does EBean Offer.
      </question>
      <answer>
        <p>EBean specific annotations reside in <a href="../apidocs/com/avaje/ebean/annotation/package-summary.html">com.avaje.ebean.annotation</a></p>
        <p>Entity level annotations:</p>
        <dl>
<dt>CacheStrategy</dt><dd>Specify the default cache use specific entity type.</dd>
<dt>CacheTuning</dt><dd>Specify cache tuning for a specific entity type.</dd>
<dt>LdapDomain</dt><dd>Used to mark an Entity as a Ldap Domain object.</dd>
<dt>LdapId</dt><dd>Used to define the ID property.</dd>
<dt>NamedUpdate</dt><dd>An Update statement for a particular entity bean type.</dd>
<dt>NamedUpdates</dt><dd>Holds an array of named Update statements for a particular entity bean type.</dd>
 <dt>Sql</dt><dd>Specify explicit sql for multiple select statements.</dd>
<dt>SqlSelect</dt><dd>Specify an explicit sql select statement to use for querying an entity bean.</dd>
<dt>Transactional</dt><dd>Specify transaction scoping for a method.</dd>
<dt>UpdateMode</dt><dd>Specify the update mode for the specific entity type.</dd>
        </dl>
        <p>Attribute level annotations:</p>
        <dl>
<dt>CreatedTimestamp</dt><dd>For a timestamp property that is set to the datetime when the entity is created/inserted.</dd>
<dt>EmbeddedColumns</dt><dd>Specify property name to db column mapping for Embedded beans.</dd>
<dt>Encrypted</dt><dd>Specify that the property is stored in encrypted form.</dd>
<dt>EnumMapping</dt><dd>For mapping the values of an Enum to and from Database values.</dd>
<dt>EnumValue</dt><dd>Enables you to specify a value to use to persist for an enum value.</dd>
<dt>Formula</dt><dd>Assign to a property to be based on a SQL formula.</dd>
<dt>LdapAttribute</dt><dd>Used to define the mapping of a bean property to an Ldap attribute.</dd>
<dt>PrivateOwned</dt><dd>Specify that the elements of a OneToMany are private owned.</dd>
<dt>UpdatedTimestamp</dt><dd>For a timestamp property that is set to the datetime when the entity was last updated.</dd>
<dt>Where</dt><dd>Add an Literal to add to the where clause when a many property (List, Set or Map) is loaded or refreshed.</dd>
        </dl>
      </answer>
    </faq>
  </part>

  <part id="spring">

    <title>Spring</title>

    <faq id="how-install">
      <question>
        What do I need to configure to configure ebean through spring?
      </question>
      <answer>
        <p>The key components in a spring configuration file are</p><ol>
<li>A bean that specifies the SpringAwareJdbcTransactionManager</li>
<li>A bean that defines each ebean server.  That configuration requires a DataSource and ddl generation options etc.</li>
</ol><p><a href="spring2.html">Click here for more spring configuration examples</a></p>
      </answer>
    </faq>

  </part>

</faqs>
